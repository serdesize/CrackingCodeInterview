#pragma once

/***************************************************************************************************************************
 * Time Complexity -- Heap information aka Priority Queue
 * Access : O(N)
 * Search : O(N)
 * Insert : O(1)
 * Delete : O(1)
 *
 ***************************************************************************************************************************
 */

namespace ds 
{
	template <class T>
	class priority_queue 
	{
	private:
	
	public:

		priority_queue() {}
		~priority_queue() {}

		/// -------------------------------------------------------------------
		/// note: 
		/// time complexity: O(log N) 
		/// return:
		/// -------------------------------------------------------------------
		void insert(T anItem) 
		{
		
		}

		/// -------------------------------------------------------------------
		/// note: 
		/// time complexity: O(log N)
		/// return:
		/// -------------------------------------------------------------------
		bool delete_min()
		{
		
		}

		/// -------------------------------------------------------------------
		/// note: 
		/// time complexity: O(log N)
		/// return:
		/// -------------------------------------------------------------------
		void remove() 
		{
		
		}

		/// -------------------------------------------------------------------
		/// note: 
		/// time complexity: O(1)
		/// return:
		/// -------------------------------------------------------------------
		T find_min() 
		{
		
		}
	};
}